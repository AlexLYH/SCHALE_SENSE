// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoadingImageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LoadingImageExcel GetRootAsLoadingImageExcel(ByteBuffer _bb) { return GetRootAsLoadingImageExcel(_bb, new LoadingImageExcel()); }
  public static LoadingImageExcel GetRootAsLoadingImageExcel(ByteBuffer _bb, LoadingImageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingImageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ImagePathKr { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathKrBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetImagePathKrBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetImagePathKrArray() { return __p.__vector_as_array<byte>(6); }
  public string ImagePathJp { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathJpBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetImagePathJpBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetImagePathJpArray() { return __p.__vector_as_array<byte>(8); }
  public int DisplayWeight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SCHALE.Common.FlatData.LoadingImageExcel> CreateLoadingImageExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset ImagePathKrOffset = default(StringOffset),
      StringOffset ImagePathJpOffset = default(StringOffset),
      int DisplayWeight = 0) {
    builder.StartTable(4);
    LoadingImageExcel.AddID(builder, ID);
    LoadingImageExcel.AddDisplayWeight(builder, DisplayWeight);
    LoadingImageExcel.AddImagePathJp(builder, ImagePathJpOffset);
    LoadingImageExcel.AddImagePathKr(builder, ImagePathKrOffset);
    return LoadingImageExcel.EndLoadingImageExcel(builder);
  }

  public static void StartLoadingImageExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddID(FlatBufferBuilder builder, long iD) { builder.AddLong(0, iD, 0); }
  public static void AddImagePathKr(FlatBufferBuilder builder, StringOffset imagePathKrOffset) { builder.AddOffset(1, imagePathKrOffset.Value, 0); }
  public static void AddImagePathJp(FlatBufferBuilder builder, StringOffset imagePathJpOffset) { builder.AddOffset(2, imagePathJpOffset.Value, 0); }
  public static void AddDisplayWeight(FlatBufferBuilder builder, int displayWeight) { builder.AddInt(3, displayWeight, 0); }
  public static Offset<SCHALE.Common.FlatData.LoadingImageExcel> EndLoadingImageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.LoadingImageExcel>(o);
  }
}


static public class LoadingImageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ID*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*ImagePathKr*/, false)
      && verifier.VerifyString(tablePos, 8 /*ImagePathJp*/, false)
      && verifier.VerifyField(tablePos, 10 /*DisplayWeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
