// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MiniGameMissionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MiniGameMissionExcel GetRootAsMiniGameMissionExcel(ByteBuffer _bb) { return GetRootAsMiniGameMissionExcel(_bb, new MiniGameMissionExcel()); }
  public static MiniGameMissionExcel GetRootAsMiniGameMissionExcel(ByteBuffer _bb, MiniGameMissionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameMissionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroupName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGroupNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGroupNameArray() { return __p.__vector_as_array<byte>(10); }
  public SCHALE.Common.FlatData.MissionCategory Category { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.MissionCategory)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.MissionCategory.Challenge; } }
  public string Description { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(14); }
  public SCHALE.Common.FlatData.MissionResetType ResetType { get { int o = __p.__offset(16); return o != 0 ? (SCHALE.Common.FlatData.MissionResetType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.MissionResetType.None; } }
  public SCHALE.Common.FlatData.MissionToastDisplayConditionType ToastDisplayType { get { int o = __p.__offset(18); return o != 0 ? (SCHALE.Common.FlatData.MissionToastDisplayConditionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.MissionToastDisplayConditionType.Always; } }
  public string ToastImagePath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToastImagePathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetToastImagePathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetToastImagePathArray() { return __p.__vector_as_array<byte>(20); }
  public bool ViewFlag { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long DisplayOrder { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PreMissionId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int PreMissionIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetPreMissionIdBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetPreMissionIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetPreMissionIdArray() { return __p.__vector_as_array<long>(26); }
  public SCHALE.Common.FlatData.AccountState AccountType { get { int o = __p.__offset(28); return o != 0 ? (SCHALE.Common.FlatData.AccountState)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.AccountState.WaitingSignIn; } }
  public long AccountLevel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShortcutUI(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ShortcutUILength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SCHALE.Common.FlatData.MissionCompleteConditionType CompleteConditionType { get { int o = __p.__offset(34); return o != 0 ? (SCHALE.Common.FlatData.MissionCompleteConditionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.MissionCompleteConditionType.None; } }
  public bool IsCompleteExtensionTime { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long CompleteConditionCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CompleteConditionParameter(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CompleteConditionParameterLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCompleteConditionParameterBytes() { return __p.__vector_as_span<long>(40, 8); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public long[] GetCompleteConditionParameterArray() { return __p.__vector_as_array<long>(40); }
  public SCHALE.Common.FlatData.Tag CompleteConditionParameterTag(int j) { int o = __p.__offset(42); return o != 0 ? (SCHALE.Common.FlatData.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.Tag)0; }
  public int CompleteConditionParameterTagLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.Tag> GetCompleteConditionParameterTagBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.Tag>(42, 4); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterTagBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public SCHALE.Common.FlatData.Tag[] GetCompleteConditionParameterTagArray() { int o = __p.__offset(42); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.Tag[] a = new SCHALE.Common.FlatData.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public string RewardIcon { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardIconBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetRewardIconBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetRewardIconArray() { return __p.__vector_as_array<byte>(44); }
  public SCHALE.Common.FlatData.ParcelType MissionRewardParcelType(int j) { int o = __p.__offset(46); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.ParcelType)0; }
  public int MissionRewardParcelTypeLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.ParcelType> GetMissionRewardParcelTypeBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.ParcelType>(46, 4); }
#else
  public ArraySegment<byte>? GetMissionRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public SCHALE.Common.FlatData.ParcelType[] GetMissionRewardParcelTypeArray() { int o = __p.__offset(46); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.ParcelType[] a = new SCHALE.Common.FlatData.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long MissionRewardParcelId(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MissionRewardParcelIdLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMissionRewardParcelIdBytes() { return __p.__vector_as_span<long>(48, 8); }
#else
  public ArraySegment<byte>? GetMissionRewardParcelIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public long[] GetMissionRewardParcelIdArray() { return __p.__vector_as_array<long>(48); }
  public int MissionRewardAmount(int j) { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MissionRewardAmountLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMissionRewardAmountBytes() { return __p.__vector_as_span<int>(50, 4); }
#else
  public ArraySegment<byte>? GetMissionRewardAmountBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public int[] GetMissionRewardAmountArray() { return __p.__vector_as_array<int>(50); }

  public static Offset<SCHALE.Common.FlatData.MiniGameMissionExcel> CreateMiniGameMissionExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      StringOffset GroupNameOffset = default(StringOffset),
      SCHALE.Common.FlatData.MissionCategory Category = SCHALE.Common.FlatData.MissionCategory.Challenge,
      StringOffset DescriptionOffset = default(StringOffset),
      SCHALE.Common.FlatData.MissionResetType ResetType = SCHALE.Common.FlatData.MissionResetType.None,
      SCHALE.Common.FlatData.MissionToastDisplayConditionType ToastDisplayType = SCHALE.Common.FlatData.MissionToastDisplayConditionType.Always,
      StringOffset ToastImagePathOffset = default(StringOffset),
      bool ViewFlag = false,
      long DisplayOrder = 0,
      VectorOffset PreMissionIdOffset = default(VectorOffset),
      SCHALE.Common.FlatData.AccountState AccountType = SCHALE.Common.FlatData.AccountState.WaitingSignIn,
      long AccountLevel = 0,
      VectorOffset ShortcutUIOffset = default(VectorOffset),
      SCHALE.Common.FlatData.MissionCompleteConditionType CompleteConditionType = SCHALE.Common.FlatData.MissionCompleteConditionType.None,
      bool IsCompleteExtensionTime = false,
      long CompleteConditionCount = 0,
      VectorOffset CompleteConditionParameterOffset = default(VectorOffset),
      VectorOffset CompleteConditionParameterTagOffset = default(VectorOffset),
      StringOffset RewardIconOffset = default(StringOffset),
      VectorOffset MissionRewardParcelTypeOffset = default(VectorOffset),
      VectorOffset MissionRewardParcelIdOffset = default(VectorOffset),
      VectorOffset MissionRewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(24);
    MiniGameMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount);
    MiniGameMissionExcel.AddAccountLevel(builder, AccountLevel);
    MiniGameMissionExcel.AddDisplayOrder(builder, DisplayOrder);
    MiniGameMissionExcel.AddGroupId(builder, GroupId);
    MiniGameMissionExcel.AddEventContentId(builder, EventContentId);
    MiniGameMissionExcel.AddId(builder, Id);
    MiniGameMissionExcel.AddMissionRewardAmount(builder, MissionRewardAmountOffset);
    MiniGameMissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelIdOffset);
    MiniGameMissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelTypeOffset);
    MiniGameMissionExcel.AddRewardIcon(builder, RewardIconOffset);
    MiniGameMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTagOffset);
    MiniGameMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameterOffset);
    MiniGameMissionExcel.AddCompleteConditionType(builder, CompleteConditionType);
    MiniGameMissionExcel.AddShortcutUI(builder, ShortcutUIOffset);
    MiniGameMissionExcel.AddAccountType(builder, AccountType);
    MiniGameMissionExcel.AddPreMissionId(builder, PreMissionIdOffset);
    MiniGameMissionExcel.AddToastImagePath(builder, ToastImagePathOffset);
    MiniGameMissionExcel.AddToastDisplayType(builder, ToastDisplayType);
    MiniGameMissionExcel.AddResetType(builder, ResetType);
    MiniGameMissionExcel.AddDescription(builder, DescriptionOffset);
    MiniGameMissionExcel.AddCategory(builder, Category);
    MiniGameMissionExcel.AddGroupName(builder, GroupNameOffset);
    MiniGameMissionExcel.AddIsCompleteExtensionTime(builder, IsCompleteExtensionTime);
    MiniGameMissionExcel.AddViewFlag(builder, ViewFlag);
    return MiniGameMissionExcel.EndMiniGameMissionExcel(builder);
  }

  public static void StartMiniGameMissionExcel(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(2, groupId, 0); }
  public static void AddGroupName(FlatBufferBuilder builder, StringOffset groupNameOffset) { builder.AddOffset(3, groupNameOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, SCHALE.Common.FlatData.MissionCategory category) { builder.AddInt(4, (int)category, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(5, descriptionOffset.Value, 0); }
  public static void AddResetType(FlatBufferBuilder builder, SCHALE.Common.FlatData.MissionResetType resetType) { builder.AddInt(6, (int)resetType, 0); }
  public static void AddToastDisplayType(FlatBufferBuilder builder, SCHALE.Common.FlatData.MissionToastDisplayConditionType toastDisplayType) { builder.AddInt(7, (int)toastDisplayType, 0); }
  public static void AddToastImagePath(FlatBufferBuilder builder, StringOffset toastImagePathOffset) { builder.AddOffset(8, toastImagePathOffset.Value, 0); }
  public static void AddViewFlag(FlatBufferBuilder builder, bool viewFlag) { builder.AddBool(9, viewFlag, false); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(10, displayOrder, 0); }
  public static void AddPreMissionId(FlatBufferBuilder builder, VectorOffset preMissionIdOffset) { builder.AddOffset(11, preMissionIdOffset.Value, 0); }
  public static VectorOffset CreatePreMissionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreMissionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAccountType(FlatBufferBuilder builder, SCHALE.Common.FlatData.AccountState accountType) { builder.AddInt(12, (int)accountType, 0); }
  public static void AddAccountLevel(FlatBufferBuilder builder, long accountLevel) { builder.AddLong(13, accountLevel, 0); }
  public static void AddShortcutUI(FlatBufferBuilder builder, VectorOffset shortcutUIOffset) { builder.AddOffset(14, shortcutUIOffset.Value, 0); }
  public static VectorOffset CreateShortcutUIVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShortcutUIVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCompleteConditionType(FlatBufferBuilder builder, SCHALE.Common.FlatData.MissionCompleteConditionType completeConditionType) { builder.AddInt(15, (int)completeConditionType, 0); }
  public static void AddIsCompleteExtensionTime(FlatBufferBuilder builder, bool isCompleteExtensionTime) { builder.AddBool(16, isCompleteExtensionTime, false); }
  public static void AddCompleteConditionCount(FlatBufferBuilder builder, long completeConditionCount) { builder.AddLong(17, completeConditionCount, 0); }
  public static void AddCompleteConditionParameter(FlatBufferBuilder builder, VectorOffset completeConditionParameterOffset) { builder.AddOffset(18, completeConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCompleteConditionParameterTag(FlatBufferBuilder builder, VectorOffset completeConditionParameterTagOffset) { builder.AddOffset(19, completeConditionParameterTagOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterTagVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardIcon(FlatBufferBuilder builder, StringOffset rewardIconOffset) { builder.AddOffset(20, rewardIconOffset.Value, 0); }
  public static void AddMissionRewardParcelType(FlatBufferBuilder builder, VectorOffset missionRewardParcelTypeOffset) { builder.AddOffset(21, missionRewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardParcelTypeVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissionRewardParcelId(FlatBufferBuilder builder, VectorOffset missionRewardParcelIdOffset) { builder.AddOffset(22, missionRewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMissionRewardAmount(FlatBufferBuilder builder, VectorOffset missionRewardAmountOffset) { builder.AddOffset(23, missionRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCHALE.Common.FlatData.MiniGameMissionExcel> EndMiniGameMissionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.MiniGameMissionExcel>(o);
  }
}


static public class MiniGameMissionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*GroupName*/, false)
      && verifier.VerifyField(tablePos, 12 /*Category*/, 4 /*SCHALE.Common.FlatData.MissionCategory*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Description*/, false)
      && verifier.VerifyField(tablePos, 16 /*ResetType*/, 4 /*SCHALE.Common.FlatData.MissionResetType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ToastDisplayType*/, 4 /*SCHALE.Common.FlatData.MissionToastDisplayConditionType*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*ToastImagePath*/, false)
      && verifier.VerifyField(tablePos, 22 /*ViewFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*PreMissionId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*AccountType*/, 4 /*SCHALE.Common.FlatData.AccountState*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*AccountLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*ShortcutUI*/, false)
      && verifier.VerifyField(tablePos, 34 /*CompleteConditionType*/, 4 /*SCHALE.Common.FlatData.MissionCompleteConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*IsCompleteExtensionTime*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*CompleteConditionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*CompleteConditionParameter*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*CompleteConditionParameterTag*/, 4 /*SCHALE.Common.FlatData.Tag*/, false)
      && verifier.VerifyString(tablePos, 44 /*RewardIcon*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*MissionRewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*MissionRewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 50 /*MissionRewardAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
