// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PickupDuplicateBonusExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PickupDuplicateBonusExcel GetRootAsPickupDuplicateBonusExcel(ByteBuffer _bb) { return GetRootAsPickupDuplicateBonusExcel(_bb, new PickupDuplicateBonusExcel()); }
  public static PickupDuplicateBonusExcel GetRootAsPickupDuplicateBonusExcel(ByteBuffer _bb, PickupDuplicateBonusExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PickupDuplicateBonusExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ShopCategoryType ShopCategoryType { get { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.ShopCategoryType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ShopCategoryType.General; } }
  public long ShopId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PickupCharacterId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType RewardParcelType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.PickupDuplicateBonusExcel> CreatePickupDuplicateBonusExcel(FlatBufferBuilder builder,
      long Id = 0,
      SCHALE.Common.FlatData.ShopCategoryType ShopCategoryType = SCHALE.Common.FlatData.ShopCategoryType.General,
      long ShopId = 0,
      long PickupCharacterId = 0,
      SCHALE.Common.FlatData.ParcelType RewardParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(7);
    PickupDuplicateBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    PickupDuplicateBonusExcel.AddRewardParcelId(builder, RewardParcelId);
    PickupDuplicateBonusExcel.AddPickupCharacterId(builder, PickupCharacterId);
    PickupDuplicateBonusExcel.AddShopId(builder, ShopId);
    PickupDuplicateBonusExcel.AddId(builder, Id);
    PickupDuplicateBonusExcel.AddRewardParcelType(builder, RewardParcelType);
    PickupDuplicateBonusExcel.AddShopCategoryType(builder, ShopCategoryType);
    return PickupDuplicateBonusExcel.EndPickupDuplicateBonusExcel(builder);
  }

  public static void StartPickupDuplicateBonusExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddShopCategoryType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ShopCategoryType shopCategoryType) { builder.AddInt(1, (int)shopCategoryType, 0); }
  public static void AddShopId(FlatBufferBuilder builder, long shopId) { builder.AddLong(2, shopId, 0); }
  public static void AddPickupCharacterId(FlatBufferBuilder builder, long pickupCharacterId) { builder.AddLong(3, pickupCharacterId, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType rewardParcelType) { builder.AddInt(4, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(5, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(6, rewardParcelAmount, 0); }
  public static Offset<SCHALE.Common.FlatData.PickupDuplicateBonusExcel> EndPickupDuplicateBonusExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.PickupDuplicateBonusExcel>(o);
  }
}


static public class PickupDuplicateBonusExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ShopCategoryType*/, 4 /*SCHALE.Common.FlatData.ShopCategoryType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ShopId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*PickupCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
