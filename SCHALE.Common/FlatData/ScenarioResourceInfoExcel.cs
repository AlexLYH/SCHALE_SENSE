// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ScenarioResourceInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ScenarioResourceInfoExcel GetRootAsScenarioResourceInfoExcel(ByteBuffer _bb) { return GetRootAsScenarioResourceInfoExcel(_bb, new ScenarioResourceInfoExcel()); }
  public static ScenarioResourceInfoExcel GetRootAsScenarioResourceInfoExcel(ByteBuffer _bb, ScenarioResourceInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioResourceInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioModeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long VideoId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BgmId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AudioName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAudioNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAudioNameArray() { return __p.__vector_as_array<byte>(12); }
  public string SpinePath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSpinePathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSpinePathArray() { return __p.__vector_as_array<byte>(14); }
  public int Ratio { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LobbyAniPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyAniPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLobbyAniPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLobbyAniPathArray() { return __p.__vector_as_array<byte>(18); }
  public string MovieCGPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMovieCGPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMovieCGPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMovieCGPathArray() { return __p.__vector_as_array<byte>(20); }
  public uint LocalizeId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<SCHALE.Common.FlatData.ScenarioResourceInfoExcel> CreateScenarioResourceInfoExcel(FlatBufferBuilder builder,
      long Id = 0,
      long ScenarioModeId = 0,
      long VideoId = 0,
      long BgmId = 0,
      StringOffset AudioNameOffset = default(StringOffset),
      StringOffset SpinePathOffset = default(StringOffset),
      int Ratio = 0,
      StringOffset LobbyAniPathOffset = default(StringOffset),
      StringOffset MovieCGPathOffset = default(StringOffset),
      uint LocalizeId = 0) {
    builder.StartTable(10);
    ScenarioResourceInfoExcel.AddBgmId(builder, BgmId);
    ScenarioResourceInfoExcel.AddVideoId(builder, VideoId);
    ScenarioResourceInfoExcel.AddScenarioModeId(builder, ScenarioModeId);
    ScenarioResourceInfoExcel.AddId(builder, Id);
    ScenarioResourceInfoExcel.AddLocalizeId(builder, LocalizeId);
    ScenarioResourceInfoExcel.AddMovieCGPath(builder, MovieCGPathOffset);
    ScenarioResourceInfoExcel.AddLobbyAniPath(builder, LobbyAniPathOffset);
    ScenarioResourceInfoExcel.AddRatio(builder, Ratio);
    ScenarioResourceInfoExcel.AddSpinePath(builder, SpinePathOffset);
    ScenarioResourceInfoExcel.AddAudioName(builder, AudioNameOffset);
    return ScenarioResourceInfoExcel.EndScenarioResourceInfoExcel(builder);
  }

  public static void StartScenarioResourceInfoExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddScenarioModeId(FlatBufferBuilder builder, long scenarioModeId) { builder.AddLong(1, scenarioModeId, 0); }
  public static void AddVideoId(FlatBufferBuilder builder, long videoId) { builder.AddLong(2, videoId, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, long bgmId) { builder.AddLong(3, bgmId, 0); }
  public static void AddAudioName(FlatBufferBuilder builder, StringOffset audioNameOffset) { builder.AddOffset(4, audioNameOffset.Value, 0); }
  public static void AddSpinePath(FlatBufferBuilder builder, StringOffset spinePathOffset) { builder.AddOffset(5, spinePathOffset.Value, 0); }
  public static void AddRatio(FlatBufferBuilder builder, int ratio) { builder.AddInt(6, ratio, 0); }
  public static void AddLobbyAniPath(FlatBufferBuilder builder, StringOffset lobbyAniPathOffset) { builder.AddOffset(7, lobbyAniPathOffset.Value, 0); }
  public static void AddMovieCGPath(FlatBufferBuilder builder, StringOffset movieCGPathOffset) { builder.AddOffset(8, movieCGPathOffset.Value, 0); }
  public static void AddLocalizeId(FlatBufferBuilder builder, uint localizeId) { builder.AddUint(9, localizeId, 0); }
  public static Offset<SCHALE.Common.FlatData.ScenarioResourceInfoExcel> EndScenarioResourceInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.ScenarioResourceInfoExcel>(o);
  }
}


static public class ScenarioResourceInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ScenarioModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VideoId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*BgmId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*AudioName*/, false)
      && verifier.VerifyString(tablePos, 14 /*SpinePath*/, false)
      && verifier.VerifyField(tablePos, 16 /*Ratio*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*LobbyAniPath*/, false)
      && verifier.VerifyString(tablePos, 20 /*MovieCGPath*/, false)
      && verifier.VerifyField(tablePos, 22 /*LocalizeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
