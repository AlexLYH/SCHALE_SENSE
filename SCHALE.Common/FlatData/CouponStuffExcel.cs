// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CouponStuffExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CouponStuffExcel GetRootAsCouponStuffExcel(ByteBuffer _bb) { return GetRootAsCouponStuffExcel(_bb, new CouponStuffExcel()); }
  public static CouponStuffExcel GetRootAsCouponStuffExcel(ByteBuffer _bb, CouponStuffExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CouponStuffExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long StuffId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType ParcelType { get { int o = __p.__offset(6); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long ParcelId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int LimitAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CouponStuffNameLocalizeKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCouponStuffNameLocalizeKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCouponStuffNameLocalizeKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCouponStuffNameLocalizeKeyArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SCHALE.Common.FlatData.CouponStuffExcel> CreateCouponStuffExcel(FlatBufferBuilder builder,
      long StuffId = 0,
      SCHALE.Common.FlatData.ParcelType ParcelType = SCHALE.Common.FlatData.ParcelType.None,
      long ParcelId = 0,
      int LimitAmount = 0,
      StringOffset CouponStuffNameLocalizeKeyOffset = default(StringOffset)) {
    builder.StartTable(5);
    CouponStuffExcel.AddParcelId(builder, ParcelId);
    CouponStuffExcel.AddStuffId(builder, StuffId);
    CouponStuffExcel.AddCouponStuffNameLocalizeKey(builder, CouponStuffNameLocalizeKeyOffset);
    CouponStuffExcel.AddLimitAmount(builder, LimitAmount);
    CouponStuffExcel.AddParcelType(builder, ParcelType);
    return CouponStuffExcel.EndCouponStuffExcel(builder);
  }

  public static void StartCouponStuffExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStuffId(FlatBufferBuilder builder, long stuffId) { builder.AddLong(0, stuffId, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType parcelType) { builder.AddInt(1, (int)parcelType, 0); }
  public static void AddParcelId(FlatBufferBuilder builder, long parcelId) { builder.AddLong(2, parcelId, 0); }
  public static void AddLimitAmount(FlatBufferBuilder builder, int limitAmount) { builder.AddInt(3, limitAmount, 0); }
  public static void AddCouponStuffNameLocalizeKey(FlatBufferBuilder builder, StringOffset couponStuffNameLocalizeKeyOffset) { builder.AddOffset(4, couponStuffNameLocalizeKeyOffset.Value, 0); }
  public static Offset<SCHALE.Common.FlatData.CouponStuffExcel> EndCouponStuffExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.CouponStuffExcel>(o);
  }
}


static public class CouponStuffExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StuffId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ParcelType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*LimitAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*CouponStuffNameLocalizeKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
