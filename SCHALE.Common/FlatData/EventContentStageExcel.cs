// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventContentStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentStageExcel GetRootAsEventContentStageExcel(ByteBuffer _bb) { return GetRootAsEventContentStageExcel(_bb, new EventContentStageExcel()); }
  public static EventContentStageExcel GetRootAsEventContentStageExcel(ByteBuffer _bb, EventContentStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.StageDifficulty StageDifficulty { get { int o = __p.__offset(10); return o != 0 ? (SCHALE.Common.FlatData.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.StageDifficulty.None; } }
  public string StageNumber { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNumberBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStageNumberBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStageNumberArray() { return __p.__vector_as_array<byte>(12); }
  public int StageDisplay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PrevStageId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenDate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenEventPoint { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenConditionScenarioId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.EventContentType OpenConditionContentType { get { int o = __p.__offset(24); return o != 0 ? (SCHALE.Common.FlatData.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EventContentType.Stage; } }
  public long OpenConditionContentId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType StageEnterCostType { get { int o = __p.__offset(30); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageEnterEchelonCount { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StarConditionTacticRankSCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StarConditionTurnCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnterScenarioGroupIdLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnterScenarioGroupIdBytes() { return __p.__vector_as_span<long>(42, 8); }
#else
  public ArraySegment<byte>? GetEnterScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public long[] GetEnterScenarioGroupIdArray() { return __p.__vector_as_array<long>(42); }
  public long ClearScenarioGroupId(int j) { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearScenarioGroupIdLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearScenarioGroupIdBytes() { return __p.__vector_as_span<long>(44, 8); }
#else
  public ArraySegment<byte>? GetClearScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public long[] GetClearScenarioGroupIdArray() { return __p.__vector_as_array<long>(44); }
  public string StrategyMap { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetStrategyMapArray() { return __p.__vector_as_array<byte>(46); }
  public string StrategyMapBG { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBGBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBGBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetStrategyMapBGArray() { return __p.__vector_as_array<byte>(48); }
  public long EventContentStageRewardId { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxTurn { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SCHALE.Common.FlatData.StageTopography StageTopography { get { int o = __p.__offset(54); return o != 0 ? (SCHALE.Common.FlatData.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BgmId { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmIdBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetBgmIdBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetBgmIdArray() { return __p.__vector_as_array<byte>(58); }
  public SCHALE.Common.FlatData.StrategyEnvironment StrategyEnvironment { get { int o = __p.__offset(60); return o != 0 ? (SCHALE.Common.FlatData.StrategyEnvironment)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.StrategyEnvironment.None; } }
  public long GroundID { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ContentType ContentType { get { int o = __p.__offset(64); return o != 0 ? (SCHALE.Common.FlatData.ContentType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ContentType.None; } }
  public long BGMId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool InstantClear { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BuffContentId { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ChallengeDisplay { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public SCHALE.Common.FlatData.StarGoalType StarGoal(int j) { int o = __p.__offset(76); return o != 0 ? (SCHALE.Common.FlatData.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (SCHALE.Common.FlatData.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<SCHALE.Common.FlatData.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<SCHALE.Common.FlatData.StarGoalType>(76, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public SCHALE.Common.FlatData.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(76); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); SCHALE.Common.FlatData.StarGoalType[] a = new SCHALE.Common.FlatData.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (SCHALE.Common.FlatData.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(78, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(78); }
  public bool IsDefeatBattle { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint StageHint { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public SCHALE.Common.FlatData.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(84); return o != 0 ? (SCHALE.Common.FlatData.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.EchelonExtensionType.Base; } }

  public static Offset<SCHALE.Common.FlatData.EventContentStageExcel> CreateEventContentStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      long EventContentId = 0,
      SCHALE.Common.FlatData.StageDifficulty StageDifficulty = SCHALE.Common.FlatData.StageDifficulty.None,
      StringOffset StageNumberOffset = default(StringOffset),
      int StageDisplay = 0,
      long PrevStageId = 0,
      long OpenDate = 0,
      long OpenEventPoint = 0,
      long OpenConditionScenarioId = 0,
      SCHALE.Common.FlatData.EventContentType OpenConditionContentType = SCHALE.Common.FlatData.EventContentType.Stage,
      long OpenConditionContentId = 0,
      long BattleDuration = 0,
      SCHALE.Common.FlatData.ParcelType StageEnterCostType = SCHALE.Common.FlatData.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      int StageEnterEchelonCount = 0,
      long StarConditionTacticRankSCount = 0,
      long StarConditionTurnCount = 0,
      VectorOffset EnterScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset ClearScenarioGroupIdOffset = default(VectorOffset),
      StringOffset StrategyMapOffset = default(StringOffset),
      StringOffset StrategyMapBGOffset = default(StringOffset),
      long EventContentStageRewardId = 0,
      int MaxTurn = 0,
      SCHALE.Common.FlatData.StageTopography StageTopography = SCHALE.Common.FlatData.StageTopography.Street,
      int RecommandLevel = 0,
      StringOffset BgmIdOffset = default(StringOffset),
      SCHALE.Common.FlatData.StrategyEnvironment StrategyEnvironment = SCHALE.Common.FlatData.StrategyEnvironment.None,
      long GroundID = 0,
      SCHALE.Common.FlatData.ContentType ContentType = SCHALE.Common.FlatData.ContentType.None,
      long BGMId = 0,
      bool InstantClear = false,
      long BuffContentId = 0,
      long FixedEchelonId = 0,
      bool ChallengeDisplay = false,
      VectorOffset StarGoalOffset = default(VectorOffset),
      VectorOffset StarGoalAmountOffset = default(VectorOffset),
      bool IsDefeatBattle = false,
      uint StageHint = 0,
      SCHALE.Common.FlatData.EchelonExtensionType EchelonExtensionType = SCHALE.Common.FlatData.EchelonExtensionType.Base) {
    builder.StartTable(41);
    EventContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId);
    EventContentStageExcel.AddBuffContentId(builder, BuffContentId);
    EventContentStageExcel.AddBGMId(builder, BGMId);
    EventContentStageExcel.AddGroundID(builder, GroundID);
    EventContentStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    EventContentStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount);
    EventContentStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount);
    EventContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    EventContentStageExcel.AddBattleDuration(builder, BattleDuration);
    EventContentStageExcel.AddOpenConditionContentId(builder, OpenConditionContentId);
    EventContentStageExcel.AddOpenConditionScenarioId(builder, OpenConditionScenarioId);
    EventContentStageExcel.AddOpenEventPoint(builder, OpenEventPoint);
    EventContentStageExcel.AddOpenDate(builder, OpenDate);
    EventContentStageExcel.AddPrevStageId(builder, PrevStageId);
    EventContentStageExcel.AddEventContentId(builder, EventContentId);
    EventContentStageExcel.AddId(builder, Id);
    EventContentStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    EventContentStageExcel.AddStageHint(builder, StageHint);
    EventContentStageExcel.AddStarGoalAmount(builder, StarGoalAmountOffset);
    EventContentStageExcel.AddStarGoal(builder, StarGoalOffset);
    EventContentStageExcel.AddContentType(builder, ContentType);
    EventContentStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment);
    EventContentStageExcel.AddBgmId(builder, BgmIdOffset);
    EventContentStageExcel.AddRecommandLevel(builder, RecommandLevel);
    EventContentStageExcel.AddStageTopography(builder, StageTopography);
    EventContentStageExcel.AddMaxTurn(builder, MaxTurn);
    EventContentStageExcel.AddStrategyMapBG(builder, StrategyMapBGOffset);
    EventContentStageExcel.AddStrategyMap(builder, StrategyMapOffset);
    EventContentStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupIdOffset);
    EventContentStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupIdOffset);
    EventContentStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount);
    EventContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    EventContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    EventContentStageExcel.AddOpenConditionContentType(builder, OpenConditionContentType);
    EventContentStageExcel.AddStageDisplay(builder, StageDisplay);
    EventContentStageExcel.AddStageNumber(builder, StageNumberOffset);
    EventContentStageExcel.AddStageDifficulty(builder, StageDifficulty);
    EventContentStageExcel.AddName(builder, NameOffset);
    EventContentStageExcel.AddIsDefeatBattle(builder, IsDefeatBattle);
    EventContentStageExcel.AddChallengeDisplay(builder, ChallengeDisplay);
    EventContentStageExcel.AddInstantClear(builder, InstantClear);
    return EventContentStageExcel.EndEventContentStageExcel(builder);
  }

  public static void StartEventContentStageExcel(FlatBufferBuilder builder) { builder.StartTable(41); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(2, eventContentId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, SCHALE.Common.FlatData.StageDifficulty stageDifficulty) { builder.AddInt(3, (int)stageDifficulty, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, StringOffset stageNumberOffset) { builder.AddOffset(4, stageNumberOffset.Value, 0); }
  public static void AddStageDisplay(FlatBufferBuilder builder, int stageDisplay) { builder.AddInt(5, stageDisplay, 0); }
  public static void AddPrevStageId(FlatBufferBuilder builder, long prevStageId) { builder.AddLong(6, prevStageId, 0); }
  public static void AddOpenDate(FlatBufferBuilder builder, long openDate) { builder.AddLong(7, openDate, 0); }
  public static void AddOpenEventPoint(FlatBufferBuilder builder, long openEventPoint) { builder.AddLong(8, openEventPoint, 0); }
  public static void AddOpenConditionScenarioId(FlatBufferBuilder builder, long openConditionScenarioId) { builder.AddLong(9, openConditionScenarioId, 0); }
  public static void AddOpenConditionContentType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EventContentType openConditionContentType) { builder.AddInt(10, (int)openConditionContentType, 0); }
  public static void AddOpenConditionContentId(FlatBufferBuilder builder, long openConditionContentId) { builder.AddLong(11, openConditionContentId, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(12, battleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType stageEnterCostType) { builder.AddInt(13, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(14, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(15, stageEnterCostAmount, 0); }
  public static void AddStageEnterEchelonCount(FlatBufferBuilder builder, int stageEnterEchelonCount) { builder.AddInt(16, stageEnterEchelonCount, 0); }
  public static void AddStarConditionTacticRankSCount(FlatBufferBuilder builder, long starConditionTacticRankSCount) { builder.AddLong(17, starConditionTacticRankSCount, 0); }
  public static void AddStarConditionTurnCount(FlatBufferBuilder builder, long starConditionTurnCount) { builder.AddLong(18, starConditionTurnCount, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, VectorOffset enterScenarioGroupIdOffset) { builder.AddOffset(19, enterScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnterScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, VectorOffset clearScenarioGroupIdOffset) { builder.AddOffset(20, clearScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateClearScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStrategyMap(FlatBufferBuilder builder, StringOffset strategyMapOffset) { builder.AddOffset(21, strategyMapOffset.Value, 0); }
  public static void AddStrategyMapBG(FlatBufferBuilder builder, StringOffset strategyMapBGOffset) { builder.AddOffset(22, strategyMapBGOffset.Value, 0); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long eventContentStageRewardId) { builder.AddLong(23, eventContentStageRewardId, 0); }
  public static void AddMaxTurn(FlatBufferBuilder builder, int maxTurn) { builder.AddInt(24, maxTurn, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, SCHALE.Common.FlatData.StageTopography stageTopography) { builder.AddInt(25, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(26, recommandLevel, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, StringOffset bgmIdOffset) { builder.AddOffset(27, bgmIdOffset.Value, 0); }
  public static void AddStrategyEnvironment(FlatBufferBuilder builder, SCHALE.Common.FlatData.StrategyEnvironment strategyEnvironment) { builder.AddInt(28, (int)strategyEnvironment, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long groundID) { builder.AddLong(29, groundID, 0); }
  public static void AddContentType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ContentType contentType) { builder.AddInt(30, (int)contentType, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(31, bGMId, 0); }
  public static void AddInstantClear(FlatBufferBuilder builder, bool instantClear) { builder.AddBool(32, instantClear, false); }
  public static void AddBuffContentId(FlatBufferBuilder builder, long buffContentId) { builder.AddLong(33, buffContentId, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(34, fixedEchelonId, 0); }
  public static void AddChallengeDisplay(FlatBufferBuilder builder, bool challengeDisplay) { builder.AddBool(35, challengeDisplay, false); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset starGoalOffset) { builder.AddOffset(36, starGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, SCHALE.Common.FlatData.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, SCHALE.Common.FlatData.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<SCHALE.Common.FlatData.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<SCHALE.Common.FlatData.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset starGoalAmountOffset) { builder.AddOffset(37, starGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsDefeatBattle(FlatBufferBuilder builder, bool isDefeatBattle) { builder.AddBool(38, isDefeatBattle, false); }
  public static void AddStageHint(FlatBufferBuilder builder, uint stageHint) { builder.AddUint(39, stageHint, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, SCHALE.Common.FlatData.EchelonExtensionType echelonExtensionType) { builder.AddInt(40, (int)echelonExtensionType, 0); }
  public static Offset<SCHALE.Common.FlatData.EventContentStageExcel> EndEventContentStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.EventContentStageExcel>(o);
  }
}


static public class EventContentStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*StageDifficulty*/, 4 /*SCHALE.Common.FlatData.StageDifficulty*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*StageNumber*/, false)
      && verifier.VerifyField(tablePos, 14 /*StageDisplay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PrevStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*OpenDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*OpenEventPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*OpenConditionScenarioId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*OpenConditionContentType*/, 4 /*SCHALE.Common.FlatData.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*OpenConditionContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*StageEnterCostType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*StageEnterEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*StarConditionTacticRankSCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*StarConditionTurnCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*EnterScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*ClearScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 46 /*StrategyMap*/, false)
      && verifier.VerifyString(tablePos, 48 /*StrategyMapBG*/, false)
      && verifier.VerifyField(tablePos, 50 /*EventContentStageRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*MaxTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*StageTopography*/, 4 /*SCHALE.Common.FlatData.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*BgmId*/, false)
      && verifier.VerifyField(tablePos, 60 /*StrategyEnvironment*/, 4 /*SCHALE.Common.FlatData.StrategyEnvironment*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*GroundID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*ContentType*/, 4 /*SCHALE.Common.FlatData.ContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*InstantClear*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*BuffContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*ChallengeDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 76 /*StarGoal*/, 4 /*SCHALE.Common.FlatData.StarGoalType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 78 /*StarGoalAmount*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 80 /*IsDefeatBattle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*StageHint*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*EchelonExtensionType*/, 4 /*SCHALE.Common.FlatData.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
