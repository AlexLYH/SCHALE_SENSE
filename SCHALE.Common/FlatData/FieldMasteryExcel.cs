// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCHALE.Common.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FieldMasteryExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FieldMasteryExcel GetRootAsFieldMasteryExcel(ByteBuffer _bb) { return GetRootAsFieldMasteryExcel(_bb, new FieldMasteryExcel()); }
  public static FieldMasteryExcel GetRootAsFieldMasteryExcel(ByteBuffer _bb, FieldMasteryExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldMasteryExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SeasonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Order { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ExpAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.ParcelType TokenType { get { int o = __p.__offset(12); return o != 0 ? (SCHALE.Common.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.ParcelType.None; } }
  public long TokenId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TokenRequirement { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public SCHALE.Common.FlatData.FieldConditionType AccomplishmentConditionType { get { int o = __p.__offset(18); return o != 0 ? (SCHALE.Common.FlatData.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : SCHALE.Common.FlatData.FieldConditionType.Invalid; } }
  public long AccomplishmentConditionId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SCHALE.Common.FlatData.FieldMasteryExcel> CreateFieldMasteryExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long SeasonId = 0,
      int Order = 0,
      long ExpAmount = 0,
      SCHALE.Common.FlatData.ParcelType TokenType = SCHALE.Common.FlatData.ParcelType.None,
      long TokenId = 0,
      long TokenRequirement = 0,
      SCHALE.Common.FlatData.FieldConditionType AccomplishmentConditionType = SCHALE.Common.FlatData.FieldConditionType.Invalid,
      long AccomplishmentConditionId = 0) {
    builder.StartTable(9);
    FieldMasteryExcel.AddAccomplishmentConditionId(builder, AccomplishmentConditionId);
    FieldMasteryExcel.AddTokenRequirement(builder, TokenRequirement);
    FieldMasteryExcel.AddTokenId(builder, TokenId);
    FieldMasteryExcel.AddExpAmount(builder, ExpAmount);
    FieldMasteryExcel.AddSeasonId(builder, SeasonId);
    FieldMasteryExcel.AddUniqueId(builder, UniqueId);
    FieldMasteryExcel.AddAccomplishmentConditionType(builder, AccomplishmentConditionType);
    FieldMasteryExcel.AddTokenType(builder, TokenType);
    FieldMasteryExcel.AddOrder(builder, Order);
    return FieldMasteryExcel.EndFieldMasteryExcel(builder);
  }

  public static void StartFieldMasteryExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddSeasonId(FlatBufferBuilder builder, long seasonId) { builder.AddLong(1, seasonId, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(2, order, 0); }
  public static void AddExpAmount(FlatBufferBuilder builder, long expAmount) { builder.AddLong(3, expAmount, 0); }
  public static void AddTokenType(FlatBufferBuilder builder, SCHALE.Common.FlatData.ParcelType tokenType) { builder.AddInt(4, (int)tokenType, 0); }
  public static void AddTokenId(FlatBufferBuilder builder, long tokenId) { builder.AddLong(5, tokenId, 0); }
  public static void AddTokenRequirement(FlatBufferBuilder builder, long tokenRequirement) { builder.AddLong(6, tokenRequirement, 0); }
  public static void AddAccomplishmentConditionType(FlatBufferBuilder builder, SCHALE.Common.FlatData.FieldConditionType accomplishmentConditionType) { builder.AddInt(7, (int)accomplishmentConditionType, 0); }
  public static void AddAccomplishmentConditionId(FlatBufferBuilder builder, long accomplishmentConditionId) { builder.AddLong(8, accomplishmentConditionId, 0); }
  public static Offset<SCHALE.Common.FlatData.FieldMasteryExcel> EndFieldMasteryExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCHALE.Common.FlatData.FieldMasteryExcel>(o);
  }
}


static public class FieldMasteryExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ExpAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*TokenType*/, 4 /*SCHALE.Common.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*TokenId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*TokenRequirement*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*AccomplishmentConditionType*/, 4 /*SCHALE.Common.FlatData.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*AccomplishmentConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
